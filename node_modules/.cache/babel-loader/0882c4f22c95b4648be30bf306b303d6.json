{"ast":null,"code":"// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-nocheck\nimport interpolateNode, { Extrapolate } from '../reanimated1/derived/interpolate';\n\nfunction getVal(config) {\n  'worklet';\n\n  const {\n    type,\n    coef,\n    val,\n    ll,\n    rr,\n    x\n  } = config;\n\n  switch (type) {\n    case Extrapolate.IDENTITY:\n      return x;\n\n    case Extrapolate.CLAMP:\n      if (coef * val < coef * ll) {\n        return ll;\n      }\n\n      return rr;\n\n    case Extrapolate.EXTEND:\n    default:\n      return val;\n  }\n}\n\nfunction isExtrapolate(value) {\n  'worklet';\n\n  return value === Extrapolate.EXTEND || value === Extrapolate.CLAMP || value === Extrapolate.IDENTITY;\n}\n\nfunction validateType(type) {\n  'worklet';\n\n  const EXTRAPOLATE_ERROR_MSG = `Reanimated: config object is not valid, please provide valid config, for example:\n    interpolate(value, [inputRange], [outputRange], {\n    extrapolateLeft: 'clamp',\n    extrapolateRight: 'extend',\n  })`;\n\n  const EXTRAPOLATE_ERROR = extrapolate => `Reanimated: not supported value for \"${extrapolate}\" \\nSupported values: [\"extend\", \"clamp\", \"identity\"]\\n Valid example:\n    interpolate(value, [inputRange], [outputRange], {\n      ${extrapolate}: 'clamp',\n  })`;\n\n  type = type !== null && type !== void 0 ? type : 'extend'; // eslint-disable-next-line no-prototype-builtins\n\n  const hasExtrapolateLeft = type.hasOwnProperty('extrapolateLeft'); // eslint-disable-next-line no-prototype-builtins\n\n  const hasExtrapolateRight = type.hasOwnProperty('extrapolateRight');\n\n  if (typeof type === 'object' && (Object.keys(type).length === 2 && !(hasExtrapolateLeft && hasExtrapolateRight) || Object.keys(type).length === 1 && !(hasExtrapolateLeft || hasExtrapolateRight) || Object.keys(type).length > 2)) {\n    throw new Error(EXTRAPOLATE_ERROR_MSG);\n  }\n\n  if (typeof type === 'object') {\n    if (hasExtrapolateLeft && !isExtrapolate(type.extrapolateLeft)) {\n      throw new Error(EXTRAPOLATE_ERROR('extrapolateLeft'));\n    }\n\n    if (hasExtrapolateRight && !isExtrapolate(type.extrapolateRight)) {\n      throw new Error(EXTRAPOLATE_ERROR('extrapolateRight'));\n    }\n  }\n\n  if (typeof type === 'string' && !isExtrapolate(type)) {\n    throw new Error(`Reanimated: not supported value for \"interpolate\" \\nSupported values: [\"extend\", \"clamp\", \"identity\"]\\n Valid example:\n       interpolate(value, [inputRange], [outputRange], \"clamp\")`);\n  }\n} // TODO: support default values in worklets:\n// e.g. function interpolate(x, input, output, type = Extrapolate.CLAMP)\n\n\nfunction internalInterpolate(x, l, r, ll, rr, type) {\n  'worklet';\n\n  if (r - l === 0) return ll;\n  const progress = (x - l) / (r - l);\n  const val = ll + progress * (rr - ll);\n  const coef = rr >= ll ? 1 : -1;\n  const config = {\n    type,\n    coef,\n    val,\n    ll,\n    rr,\n    x\n  };\n  validateType(type);\n\n  if (typeof type === 'object') {\n    if (coef * val < coef * ll) {\n      return getVal(Object.assign(config, {\n        type: type.extrapolateLeft\n      }));\n    } else if (coef * val > coef * ll) {\n      return getVal(Object.assign(config, {\n        type: type.extrapolateRight\n      }));\n    }\n  }\n\n  if (coef * val < coef * ll || coef * val > coef * rr) {\n    return getVal(config);\n  }\n\n  return val;\n}\n\nexport function interpolate(x, input, output, type) {\n  'worklet';\n\n  if (x && x.__nodeID) {\n    console.warn(`interpolate() was renamed to interpolateNode() in Reanimated 2. Please use interpolateNode() instead`); // we can't use rest parameters in worklets at the moment\n    // eslint-disable-next-line prefer-spread, prefer-rest-params\n\n    return interpolateNode.apply(undefined, arguments);\n  }\n\n  const length = input.length;\n  let narrowedInput = [];\n\n  if (x < input[0]) {\n    narrowedInput = [input[0], input[1], output[0], output[1]];\n  } else if (x > input[length - 1]) {\n    narrowedInput = [input[length - 2], input[length - 1], output[length - 2], output[length - 1]];\n  } else {\n    for (let i = 1; i < length; ++i) {\n      if (x <= input[i]) {\n        narrowedInput = [input[i - 1], input[i], output[i - 1], output[i]];\n        break;\n      }\n    }\n  }\n\n  return internalInterpolate.apply({}, [x].concat(narrowedInput).concat(type));\n}","map":{"version":3,"sources":["/Users/hello/node_modules/react-native-reanimated/lib/reanimated2/interpolation.js"],"names":["interpolateNode","Extrapolate","getVal","config","type","coef","val","ll","rr","x","IDENTITY","CLAMP","EXTEND","isExtrapolate","value","validateType","EXTRAPOLATE_ERROR_MSG","EXTRAPOLATE_ERROR","extrapolate","hasExtrapolateLeft","hasOwnProperty","hasExtrapolateRight","Object","keys","length","Error","extrapolateLeft","extrapolateRight","internalInterpolate","l","r","progress","assign","interpolate","input","output","__nodeID","console","warn","apply","undefined","arguments","narrowedInput","i","concat"],"mappings":"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","sourcesContent":["// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-nocheck\nimport interpolateNode, { Extrapolate, } from '../reanimated1/derived/interpolate';\nfunction getVal(config) {\n    'worklet';\n    const { type, coef, val, ll, rr, x } = config;\n    switch (type) {\n        case Extrapolate.IDENTITY:\n            return x;\n        case Extrapolate.CLAMP:\n            if (coef * val < coef * ll) {\n                return ll;\n            }\n            return rr;\n        case Extrapolate.EXTEND:\n        default:\n            return val;\n    }\n}\nfunction isExtrapolate(value) {\n    'worklet';\n    return (value === Extrapolate.EXTEND ||\n        value === Extrapolate.CLAMP ||\n        value === Extrapolate.IDENTITY);\n}\nfunction validateType(type) {\n    'worklet';\n    const EXTRAPOLATE_ERROR_MSG = `Reanimated: config object is not valid, please provide valid config, for example:\n    interpolate(value, [inputRange], [outputRange], {\n    extrapolateLeft: 'clamp',\n    extrapolateRight: 'extend',\n  })`;\n    const EXTRAPOLATE_ERROR = (extrapolate) => `Reanimated: not supported value for \"${extrapolate}\" \\nSupported values: [\"extend\", \"clamp\", \"identity\"]\\n Valid example:\n    interpolate(value, [inputRange], [outputRange], {\n      ${extrapolate}: 'clamp',\n  })`;\n    type = type !== null && type !== void 0 ? type : 'extend';\n    // eslint-disable-next-line no-prototype-builtins\n    const hasExtrapolateLeft = type.hasOwnProperty('extrapolateLeft');\n    // eslint-disable-next-line no-prototype-builtins\n    const hasExtrapolateRight = type.hasOwnProperty('extrapolateRight');\n    if (typeof type === 'object' &&\n        ((Object.keys(type).length === 2 &&\n            !(hasExtrapolateLeft && hasExtrapolateRight)) ||\n            (Object.keys(type).length === 1 &&\n                !(hasExtrapolateLeft || hasExtrapolateRight)) ||\n            Object.keys(type).length > 2)) {\n        throw new Error(EXTRAPOLATE_ERROR_MSG);\n    }\n    if (typeof type === 'object') {\n        if (hasExtrapolateLeft && !isExtrapolate(type.extrapolateLeft)) {\n            throw new Error(EXTRAPOLATE_ERROR('extrapolateLeft'));\n        }\n        if (hasExtrapolateRight && !isExtrapolate(type.extrapolateRight)) {\n            throw new Error(EXTRAPOLATE_ERROR('extrapolateRight'));\n        }\n    }\n    if (typeof type === 'string' && !isExtrapolate(type)) {\n        throw new Error(`Reanimated: not supported value for \"interpolate\" \\nSupported values: [\"extend\", \"clamp\", \"identity\"]\\n Valid example:\n       interpolate(value, [inputRange], [outputRange], \"clamp\")`);\n    }\n}\n// TODO: support default values in worklets:\n// e.g. function interpolate(x, input, output, type = Extrapolate.CLAMP)\nfunction internalInterpolate(x, l, r, ll, rr, type) {\n    'worklet';\n    if (r - l === 0)\n        return ll;\n    const progress = (x - l) / (r - l);\n    const val = ll + progress * (rr - ll);\n    const coef = rr >= ll ? 1 : -1;\n    const config = { type, coef, val, ll, rr, x };\n    validateType(type);\n    if (typeof type === 'object') {\n        if (coef * val < coef * ll) {\n            return getVal(Object.assign(config, { type: type.extrapolateLeft }));\n        }\n        else if (coef * val > coef * ll) {\n            return getVal(Object.assign(config, { type: type.extrapolateRight }));\n        }\n    }\n    if (coef * val < coef * ll || coef * val > coef * rr) {\n        return getVal(config);\n    }\n    return val;\n}\nexport function interpolate(x, input, output, type) {\n    'worklet';\n    if (x && x.__nodeID) {\n        console.warn(`interpolate() was renamed to interpolateNode() in Reanimated 2. Please use interpolateNode() instead`);\n        // we can't use rest parameters in worklets at the moment\n        // eslint-disable-next-line prefer-spread, prefer-rest-params\n        return interpolateNode.apply(undefined, arguments);\n    }\n    const length = input.length;\n    let narrowedInput = [];\n    if (x < input[0]) {\n        narrowedInput = [input[0], input[1], output[0], output[1]];\n    }\n    else if (x > input[length - 1]) {\n        narrowedInput = [\n            input[length - 2],\n            input[length - 1],\n            output[length - 2],\n            output[length - 1],\n        ];\n    }\n    else {\n        for (let i = 1; i < length; ++i) {\n            if (x <= input[i]) {\n                narrowedInput = [input[i - 1], input[i], output[i - 1], output[i]];\n                break;\n            }\n        }\n    }\n    return internalInterpolate.apply({}, [x].concat(narrowedInput).concat(type));\n}\n"]},"metadata":{},"sourceType":"module"}