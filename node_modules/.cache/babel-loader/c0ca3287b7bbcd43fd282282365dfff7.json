{"ast":null,"code":"/* global _WORKLET */\n\n/**\n * Copied from:\n * react-native/Libraries/StyleSheet/normalizeColor.js\n * react-native/Libraries/StyleSheet/processColor.js\n * https://github.com/wcandillon/react-native-redash/blob/master/src/Colors.ts\n */\n\n/* eslint no-bitwise: 0 */\nimport { Platform } from 'react-native';\nimport { makeRemote, makeShareable, isConfigured } from './core';\nimport { interpolate } from './interpolation'; // @ts-ignore JS file\n\nimport { Extrapolate } from '../reanimated1/derived'; // var INTEGER = '[-+]?\\\\d+';\n\nconst NUMBER = '[-+]?\\\\d*\\\\.?\\\\d+';\nconst PERCENTAGE = NUMBER + '%';\n\nfunction call(...args) {\n  'worklet';\n\n  return '\\\\(\\\\s*(' + args.join(')\\\\s*,\\\\s*(') + ')\\\\s*\\\\)';\n} // matchers use RegExp objects which needs to be created separately on JS and on\n// the UI thread. We keep separate cache of Regexes for UI and JS using the below\n// objects, then pick the right cache in getMatchers() method.\n\n\nconst jsCachedMatchers = {};\nconst uiCachedMatchers = !isConfigured() ? null : makeRemote({});\n\nfunction getMatchers() {\n  'worklet';\n\n  const cachedMatchers = _WORKLET ? uiCachedMatchers : jsCachedMatchers;\n\n  if (cachedMatchers.rgb === undefined) {\n    cachedMatchers.rgb = new RegExp('rgb' + call(NUMBER, NUMBER, NUMBER));\n    cachedMatchers.rgba = new RegExp('rgba' + call(NUMBER, NUMBER, NUMBER, NUMBER));\n    cachedMatchers.hsl = new RegExp('hsl' + call(NUMBER, PERCENTAGE, PERCENTAGE));\n    cachedMatchers.hsla = new RegExp('hsla' + call(NUMBER, PERCENTAGE, PERCENTAGE, NUMBER));\n    cachedMatchers.hex3 = /^#([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/;\n    cachedMatchers.hex4 = /^#([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/;\n    cachedMatchers.hex6 = /^#([0-9a-fA-F]{6})$/;\n    cachedMatchers.hex8 = /^#([0-9a-fA-F]{8})$/;\n  }\n\n  return cachedMatchers;\n} // cachedMatchers is lazy loaded and it is frozen when worklet is being created,\n// it is possible to call getMatchers() when the object is frozen, then cachedMatchers\n// has no assigned regexes\n\n\ngetMatchers();\n\nfunction hue2rgb(p, q, t) {\n  'worklet';\n\n  if (t < 0) {\n    t += 1;\n  }\n\n  if (t > 1) {\n    t -= 1;\n  }\n\n  if (t < 1 / 6) {\n    return p + (q - p) * 6 * t;\n  }\n\n  if (t < 1 / 2) {\n    return q;\n  }\n\n  if (t < 2 / 3) {\n    return p + (q - p) * (2 / 3 - t) * 6;\n  }\n\n  return p;\n}\n\nfunction hslToRgb(h, s, l) {\n  'worklet';\n\n  const q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n  const p = 2 * l - q;\n  const r = hue2rgb(p, q, h + 1 / 3);\n  const g = hue2rgb(p, q, h);\n  const b = hue2rgb(p, q, h - 1 / 3);\n  return Math.round(r * 255) << 24 | Math.round(g * 255) << 16 | Math.round(b * 255) << 8;\n}\n\nfunction parse255(str) {\n  'worklet';\n\n  const int = Number.parseInt(str, 10);\n\n  if (int < 0) {\n    return 0;\n  }\n\n  if (int > 255) {\n    return 255;\n  }\n\n  return int;\n}\n\nfunction parse360(str) {\n  'worklet';\n\n  const int = Number.parseFloat(str);\n  return (int % 360 + 360) % 360 / 360;\n}\n\nfunction parse1(str) {\n  'worklet';\n\n  const num = Number.parseFloat(str);\n\n  if (num < 0) {\n    return 0;\n  }\n\n  if (num > 1) {\n    return 255;\n  }\n\n  return Math.round(num * 255);\n}\n\nfunction parsePercentage(str) {\n  'worklet'; // parseFloat conveniently ignores the final %\n\n  const int = Number.parseFloat(str);\n\n  if (int < 0) {\n    return 0;\n  }\n\n  if (int > 100) {\n    return 1;\n  }\n\n  return int / 100;\n}\n\nconst names = !isConfigured() ? null : makeShareable({\n  transparent: 0x00000000,\n  // http://www.w3.org/TR/css3-color/#svg-color\n  aliceblue: 0xf0f8ffff,\n  antiquewhite: 0xfaebd7ff,\n  aqua: 0x00ffffff,\n  aquamarine: 0x7fffd4ff,\n  azure: 0xf0ffffff,\n  beige: 0xf5f5dcff,\n  bisque: 0xffe4c4ff,\n  black: 0x000000ff,\n  blanchedalmond: 0xffebcdff,\n  blue: 0x0000ffff,\n  blueviolet: 0x8a2be2ff,\n  brown: 0xa52a2aff,\n  burlywood: 0xdeb887ff,\n  burntsienna: 0xea7e5dff,\n  cadetblue: 0x5f9ea0ff,\n  chartreuse: 0x7fff00ff,\n  chocolate: 0xd2691eff,\n  coral: 0xff7f50ff,\n  cornflowerblue: 0x6495edff,\n  cornsilk: 0xfff8dcff,\n  crimson: 0xdc143cff,\n  cyan: 0x00ffffff,\n  darkblue: 0x00008bff,\n  darkcyan: 0x008b8bff,\n  darkgoldenrod: 0xb8860bff,\n  darkgray: 0xa9a9a9ff,\n  darkgreen: 0x006400ff,\n  darkgrey: 0xa9a9a9ff,\n  darkkhaki: 0xbdb76bff,\n  darkmagenta: 0x8b008bff,\n  darkolivegreen: 0x556b2fff,\n  darkorange: 0xff8c00ff,\n  darkorchid: 0x9932ccff,\n  darkred: 0x8b0000ff,\n  darksalmon: 0xe9967aff,\n  darkseagreen: 0x8fbc8fff,\n  darkslateblue: 0x483d8bff,\n  darkslategray: 0x2f4f4fff,\n  darkslategrey: 0x2f4f4fff,\n  darkturquoise: 0x00ced1ff,\n  darkviolet: 0x9400d3ff,\n  deeppink: 0xff1493ff,\n  deepskyblue: 0x00bfffff,\n  dimgray: 0x696969ff,\n  dimgrey: 0x696969ff,\n  dodgerblue: 0x1e90ffff,\n  firebrick: 0xb22222ff,\n  floralwhite: 0xfffaf0ff,\n  forestgreen: 0x228b22ff,\n  fuchsia: 0xff00ffff,\n  gainsboro: 0xdcdcdcff,\n  ghostwhite: 0xf8f8ffff,\n  gold: 0xffd700ff,\n  goldenrod: 0xdaa520ff,\n  gray: 0x808080ff,\n  green: 0x008000ff,\n  greenyellow: 0xadff2fff,\n  grey: 0x808080ff,\n  honeydew: 0xf0fff0ff,\n  hotpink: 0xff69b4ff,\n  indianred: 0xcd5c5cff,\n  indigo: 0x4b0082ff,\n  ivory: 0xfffff0ff,\n  khaki: 0xf0e68cff,\n  lavender: 0xe6e6faff,\n  lavenderblush: 0xfff0f5ff,\n  lawngreen: 0x7cfc00ff,\n  lemonchiffon: 0xfffacdff,\n  lightblue: 0xadd8e6ff,\n  lightcoral: 0xf08080ff,\n  lightcyan: 0xe0ffffff,\n  lightgoldenrodyellow: 0xfafad2ff,\n  lightgray: 0xd3d3d3ff,\n  lightgreen: 0x90ee90ff,\n  lightgrey: 0xd3d3d3ff,\n  lightpink: 0xffb6c1ff,\n  lightsalmon: 0xffa07aff,\n  lightseagreen: 0x20b2aaff,\n  lightskyblue: 0x87cefaff,\n  lightslategray: 0x778899ff,\n  lightslategrey: 0x778899ff,\n  lightsteelblue: 0xb0c4deff,\n  lightyellow: 0xffffe0ff,\n  lime: 0x00ff00ff,\n  limegreen: 0x32cd32ff,\n  linen: 0xfaf0e6ff,\n  magenta: 0xff00ffff,\n  maroon: 0x800000ff,\n  mediumaquamarine: 0x66cdaaff,\n  mediumblue: 0x0000cdff,\n  mediumorchid: 0xba55d3ff,\n  mediumpurple: 0x9370dbff,\n  mediumseagreen: 0x3cb371ff,\n  mediumslateblue: 0x7b68eeff,\n  mediumspringgreen: 0x00fa9aff,\n  mediumturquoise: 0x48d1ccff,\n  mediumvioletred: 0xc71585ff,\n  midnightblue: 0x191970ff,\n  mintcream: 0xf5fffaff,\n  mistyrose: 0xffe4e1ff,\n  moccasin: 0xffe4b5ff,\n  navajowhite: 0xffdeadff,\n  navy: 0x000080ff,\n  oldlace: 0xfdf5e6ff,\n  olive: 0x808000ff,\n  olivedrab: 0x6b8e23ff,\n  orange: 0xffa500ff,\n  orangered: 0xff4500ff,\n  orchid: 0xda70d6ff,\n  palegoldenrod: 0xeee8aaff,\n  palegreen: 0x98fb98ff,\n  paleturquoise: 0xafeeeeff,\n  palevioletred: 0xdb7093ff,\n  papayawhip: 0xffefd5ff,\n  peachpuff: 0xffdab9ff,\n  peru: 0xcd853fff,\n  pink: 0xffc0cbff,\n  plum: 0xdda0ddff,\n  powderblue: 0xb0e0e6ff,\n  purple: 0x800080ff,\n  rebeccapurple: 0x663399ff,\n  red: 0xff0000ff,\n  rosybrown: 0xbc8f8fff,\n  royalblue: 0x4169e1ff,\n  saddlebrown: 0x8b4513ff,\n  salmon: 0xfa8072ff,\n  sandybrown: 0xf4a460ff,\n  seagreen: 0x2e8b57ff,\n  seashell: 0xfff5eeff,\n  sienna: 0xa0522dff,\n  silver: 0xc0c0c0ff,\n  skyblue: 0x87ceebff,\n  slateblue: 0x6a5acdff,\n  slategray: 0x708090ff,\n  slategrey: 0x708090ff,\n  snow: 0xfffafaff,\n  springgreen: 0x00ff7fff,\n  steelblue: 0x4682b4ff,\n  tan: 0xd2b48cff,\n  teal: 0x008080ff,\n  thistle: 0xd8bfd8ff,\n  tomato: 0xff6347ff,\n  turquoise: 0x40e0d0ff,\n  violet: 0xee82eeff,\n  wheat: 0xf5deb3ff,\n  white: 0xffffffff,\n  whitesmoke: 0xf5f5f5ff,\n  yellow: 0xffff00ff,\n  yellowgreen: 0x9acd32ff\n});\n\nfunction normalizeColor(color) {\n  'worklet';\n\n  if (typeof color === 'number') {\n    if (color >>> 0 === color && color >= 0 && color <= 0xffffffff) {\n      return color;\n    }\n\n    return null;\n  }\n\n  if (typeof color !== 'string') {\n    return null;\n  }\n\n  const matchers = getMatchers();\n  let match; // Ordered based on occurrences on Facebook codebase\n\n  if (match = matchers.hex6.exec(color)) {\n    return Number.parseInt(match[1] + 'ff', 16) >>> 0;\n  }\n\n  if (names[color] !== undefined) {\n    return names[color];\n  }\n\n  if (match = matchers.rgb.exec(color)) {\n    return (// b\n      (parse255(match[1]) << 24 | // r\n      parse255(match[2]) << 16 | // g\n      parse255(match[3]) << 8 | 0x000000ff) >>> // a\n      0\n    );\n  }\n\n  if (match = matchers.rgba.exec(color)) {\n    return (// b\n      (parse255(match[1]) << 24 | // r\n      parse255(match[2]) << 16 | // g\n      parse255(match[3]) << 8 | parse1(match[4])) >>> // a\n      0\n    );\n  }\n\n  if (match = matchers.hex3.exec(color)) {\n    return Number.parseInt(match[1] + match[1] + // r\n    match[2] + match[2] + // g\n    match[3] + match[3] + // b\n    'ff', // a\n    16) >>> 0;\n  } // https://drafts.csswg.org/css-color-4/#hex-notation\n\n\n  if (match = matchers.hex8.exec(color)) {\n    return Number.parseInt(match[1], 16) >>> 0;\n  }\n\n  if (match = matchers.hex4.exec(color)) {\n    return Number.parseInt(match[1] + match[1] + // r\n    match[2] + match[2] + // g\n    match[3] + match[3] + // b\n    match[4] + match[4], // a\n    16) >>> 0;\n  }\n\n  if (match = matchers.hsl.exec(color)) {\n    return (hslToRgb(parse360(match[1]), // h\n    parsePercentage(match[2]), // s\n    parsePercentage(match[3]) // l\n    ) | 0x000000ff) >>> // a\n    0;\n  }\n\n  if (match = matchers.hsla.exec(color)) {\n    return (hslToRgb(parse360(match[1]), // h\n    parsePercentage(match[2]), // s\n    parsePercentage(match[3]) // l\n    ) | parse1(match[4])) >>> // a\n    0;\n  }\n\n  return null;\n}\n\nexport const opacity = c => {\n  'worklet';\n\n  return (c >> 24 & 255) / 255;\n};\nexport const red = c => {\n  'worklet';\n\n  return c >> 16 & 255;\n};\nexport const green = c => {\n  'worklet';\n\n  return c >> 8 & 255;\n};\nexport const blue = c => {\n  'worklet';\n\n  return c & 255;\n};\nexport const rgbaColor = (r, g, b, alpha = 1) => {\n  'worklet';\n\n  if (Platform.OS === 'web' || !_WORKLET) {\n    return `rgba(${r}, ${g}, ${b}, ${alpha})`;\n  }\n\n  const a = Math.round(alpha * 255);\n  const c = a * (1 << 24) + Math.round(r) * (1 << 16) + Math.round(g) * (1 << 8) + Math.round(b);\n\n  if (Platform.OS === 'android') {\n    // on Android color is represented as signed 32 bit int\n    return c < 1 << 31 >>> 0 ? c : c - Math.pow(2, 32);\n  }\n\n  return c;\n};\n\nfunction RGBtoHSV(r, g, b) {\n  'worklet';\n  /* eslint-disable */\n\n  if (arguments.length === 1) {\n    g = r.g;\n    b = r.b;\n    r = r.r;\n  }\n\n  const max = Math.max(r, g, b);\n  const min = Math.min(r, g, b);\n  const d = max - min;\n  const s = max === 0 ? 0 : d / max;\n  const v = max / 255;\n  let h;\n\n  switch (max) {\n    default:\n    /* fallthrough */\n\n    case min:\n      h = 0;\n      break;\n\n    case r:\n      h = g - b + d * (g < b ? 6 : 0);\n      h /= 6 * d;\n      break;\n\n    case g:\n      h = b - r + d * 2;\n      h /= 6 * d;\n      break;\n\n    case b:\n      h = r - g + d * 4;\n      h /= 6 * d;\n      break;\n  }\n\n  return {\n    h: h,\n    s: s,\n    v: v\n  };\n  /* eslint-enable */\n}\n\nfunction HSVtoRGB(h, s, v) {\n  'worklet';\n  /* eslint-disable */\n\n  var r, g, b, i, f, p, q, t;\n\n  if (arguments.length === 1) {\n    s = h.s;\n    v = h.v;\n    h = h.h;\n  }\n\n  i = Math.floor(h * 6);\n  f = h * 6 - i;\n  p = v * (1 - s);\n  q = v * (1 - f * s);\n  t = v * (1 - (1 - f) * s);\n\n  switch (i % 6) {\n    case 0:\n      r = v, g = t, b = p;\n      break;\n\n    case 1:\n      r = q, g = v, b = p;\n      break;\n\n    case 2:\n      r = p, g = v, b = t;\n      break;\n\n    case 3:\n      r = p, g = q, b = v;\n      break;\n\n    case 4:\n      r = t, g = p, b = v;\n      break;\n\n    case 5:\n      r = v, g = p, b = q;\n      break;\n  }\n\n  return {\n    r: Math.round(r * 255),\n    g: Math.round(g * 255),\n    b: Math.round(b * 255)\n  };\n  /* eslint-enable */\n}\n\nexport const hsvToColor = (h, s, v) => {\n  'worklet';\n\n  const {\n    r,\n    g,\n    b\n  } = HSVtoRGB(h, s, v);\n  return rgbaColor(r, g, b);\n};\nexport function processColorInitially(color) {\n  'worklet';\n\n  if (color === null || color === undefined || typeof color === 'number') {\n    return color;\n  }\n\n  let normalizedColor = normalizeColor(color);\n\n  if (normalizedColor === null || normalizedColor === undefined) {\n    return undefined;\n  }\n\n  if (typeof normalizedColor !== 'number') {\n    return null;\n  }\n\n  normalizedColor = (normalizedColor << 24 | normalizedColor >>> 8) >>> 0; // argb\n\n  return normalizedColor;\n}\nexport function isColor(value) {\n  'worklet';\n\n  if (typeof value !== 'string') {\n    return false;\n  }\n\n  return processColorInitially(value) != null;\n}\nexport function processColor(color) {\n  'worklet';\n\n  let normalizedColor = processColorInitially(color);\n\n  if (normalizedColor === null || normalizedColor === undefined) {\n    return undefined;\n  }\n\n  if (typeof normalizedColor !== 'number') {\n    return null;\n  }\n\n  if (Platform.OS === 'android') {\n    // Android use 32 bit *signed* integer to represent the color\n    // We utilize the fact that bitwise operations in JS also operates on\n    // signed 32 bit integers, so that we can use those to convert from\n    // *unsigned* to *signed* 32bit int that way.\n    normalizedColor = normalizedColor | 0x0;\n  }\n\n  return normalizedColor;\n}\nexport function convertToHSVA(color) {\n  'worklet';\n\n  const processedColor = processColorInitially(color); // argb;\n\n  const a = (processedColor >>> 24) / 255;\n  const r = processedColor << 8 >>> 24;\n  const g = processedColor << 16 >>> 24;\n  const b = processedColor << 24 >>> 24;\n  const {\n    h,\n    s,\n    v\n  } = RGBtoHSV(r, g, b);\n  return [h, s, v, a];\n}\nexport function toRGBA(HSVA) {\n  'worklet';\n\n  const {\n    r,\n    g,\n    b\n  } = HSVtoRGB(HSVA[0], HSVA[1], HSVA[2]);\n  return `rgba(${r}, ${g}, ${b}, ${HSVA[3]})`;\n}\n\nconst interpolateColorsHSV = (value, inputRange, colors) => {\n  'worklet';\n\n  const colorsAsHSV = colors.map(c => RGBtoHSV(c));\n  const h = interpolate(value, inputRange, colorsAsHSV.map(c => c.h), Extrapolate.CLAMP);\n  const s = interpolate(value, inputRange, colorsAsHSV.map(c => c.s), Extrapolate.CLAMP);\n  const v = interpolate(value, inputRange, colorsAsHSV.map(c => c.v), Extrapolate.CLAMP);\n  return hsvToColor(h, s, v);\n};\n\nconst interpolateColorsRGB = (value, inputRange, colors) => {\n  'worklet';\n\n  const r = Math.round(interpolate(value, inputRange, colors.map(c => red(c)), Extrapolate.CLAMP));\n  const g = Math.round(interpolate(value, inputRange, colors.map(c => green(c)), Extrapolate.CLAMP));\n  const b = Math.round(interpolate(value, inputRange, colors.map(c => blue(c)), Extrapolate.CLAMP));\n  const a = interpolate(value, inputRange, colors.map(c => opacity(c)), Extrapolate.CLAMP);\n  return rgbaColor(r, g, b, a);\n};\n\nexport const interpolateColor = (value, inputRange, outputRange, colorSpace = 'RGB') => {\n  'worklet';\n\n  const processedOutputRange = outputRange.map(c => processColor(c));\n\n  if (colorSpace === 'HSV') {\n    return interpolateColorsHSV(value, inputRange, processedOutputRange);\n  }\n\n  if (colorSpace === 'RGB') {\n    return interpolateColorsRGB(value, inputRange, processedOutputRange);\n  }\n\n  throw new Error(`invalid color space provided: ${colorSpace}. Supported values are: ['RGB', 'HSV']`);\n};","map":{"version":3,"sources":["/Users/hello/node_modules/react-native-reanimated/lib/reanimated2/Colors.js"],"names":["Platform","makeRemote","makeShareable","isConfigured","interpolate","Extrapolate","NUMBER","PERCENTAGE","call","args","join","jsCachedMatchers","uiCachedMatchers","getMatchers","cachedMatchers","_WORKLET","rgb","undefined","RegExp","rgba","hsl","hsla","hex3","hex4","hex6","hex8","hue2rgb","p","q","t","hslToRgb","h","s","l","r","g","b","Math","round","parse255","str","int","Number","parseInt","parse360","parseFloat","parse1","num","parsePercentage","names","transparent","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","burntsienna","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkgrey","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkslategrey","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dimgrey","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","green","greenyellow","grey","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgray","lightgreen","lightgrey","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightslategrey","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","rebeccapurple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","slategrey","snow","springgreen","steelblue","tan","teal","thistle","tomato","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen","normalizeColor","color","matchers","match","exec","opacity","c","rgbaColor","alpha","OS","a","pow","RGBtoHSV","arguments","length","max","min","d","v","HSVtoRGB","i","f","floor","hsvToColor","processColorInitially","normalizedColor","isColor","value","processColor","convertToHSVA","processedColor","toRGBA","HSVA","interpolateColorsHSV","inputRange","colors","colorsAsHSV","map","CLAMP","interpolateColorsRGB","interpolateColor","outputRange","colorSpace","processedOutputRange","Error"],"mappings":"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","sourcesContent":["/* global _WORKLET */\n/**\n * Copied from:\n * react-native/Libraries/StyleSheet/normalizeColor.js\n * react-native/Libraries/StyleSheet/processColor.js\n * https://github.com/wcandillon/react-native-redash/blob/master/src/Colors.ts\n */\n/* eslint no-bitwise: 0 */\nimport { Platform } from 'react-native';\nimport { makeRemote, makeShareable, isConfigured } from './core';\nimport { interpolate } from './interpolation';\n// @ts-ignore JS file\nimport { Extrapolate } from '../reanimated1/derived';\n// var INTEGER = '[-+]?\\\\d+';\nconst NUMBER = '[-+]?\\\\d*\\\\.?\\\\d+';\nconst PERCENTAGE = NUMBER + '%';\nfunction call(...args) {\n    'worklet';\n    return '\\\\(\\\\s*(' + args.join(')\\\\s*,\\\\s*(') + ')\\\\s*\\\\)';\n}\n// matchers use RegExp objects which needs to be created separately on JS and on\n// the UI thread. We keep separate cache of Regexes for UI and JS using the below\n// objects, then pick the right cache in getMatchers() method.\nconst jsCachedMatchers = {};\nconst uiCachedMatchers = !isConfigured() ? null : makeRemote({});\nfunction getMatchers() {\n    'worklet';\n    const cachedMatchers = _WORKLET\n        ? uiCachedMatchers\n        : jsCachedMatchers;\n    if (cachedMatchers.rgb === undefined) {\n        cachedMatchers.rgb = new RegExp('rgb' + call(NUMBER, NUMBER, NUMBER));\n        cachedMatchers.rgba = new RegExp('rgba' + call(NUMBER, NUMBER, NUMBER, NUMBER));\n        cachedMatchers.hsl = new RegExp('hsl' + call(NUMBER, PERCENTAGE, PERCENTAGE));\n        cachedMatchers.hsla = new RegExp('hsla' + call(NUMBER, PERCENTAGE, PERCENTAGE, NUMBER));\n        cachedMatchers.hex3 = /^#([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/;\n        cachedMatchers.hex4 = /^#([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/;\n        cachedMatchers.hex6 = /^#([0-9a-fA-F]{6})$/;\n        cachedMatchers.hex8 = /^#([0-9a-fA-F]{8})$/;\n    }\n    return cachedMatchers;\n}\n// cachedMatchers is lazy loaded and it is frozen when worklet is being created,\n// it is possible to call getMatchers() when the object is frozen, then cachedMatchers\n// has no assigned regexes\ngetMatchers();\nfunction hue2rgb(p, q, t) {\n    'worklet';\n    if (t < 0) {\n        t += 1;\n    }\n    if (t > 1) {\n        t -= 1;\n    }\n    if (t < 1 / 6) {\n        return p + (q - p) * 6 * t;\n    }\n    if (t < 1 / 2) {\n        return q;\n    }\n    if (t < 2 / 3) {\n        return p + (q - p) * (2 / 3 - t) * 6;\n    }\n    return p;\n}\nfunction hslToRgb(h, s, l) {\n    'worklet';\n    const q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n    const p = 2 * l - q;\n    const r = hue2rgb(p, q, h + 1 / 3);\n    const g = hue2rgb(p, q, h);\n    const b = hue2rgb(p, q, h - 1 / 3);\n    return ((Math.round(r * 255) << 24) |\n        (Math.round(g * 255) << 16) |\n        (Math.round(b * 255) << 8));\n}\nfunction parse255(str) {\n    'worklet';\n    const int = Number.parseInt(str, 10);\n    if (int < 0) {\n        return 0;\n    }\n    if (int > 255) {\n        return 255;\n    }\n    return int;\n}\nfunction parse360(str) {\n    'worklet';\n    const int = Number.parseFloat(str);\n    return (((int % 360) + 360) % 360) / 360;\n}\nfunction parse1(str) {\n    'worklet';\n    const num = Number.parseFloat(str);\n    if (num < 0) {\n        return 0;\n    }\n    if (num > 1) {\n        return 255;\n    }\n    return Math.round(num * 255);\n}\nfunction parsePercentage(str) {\n    'worklet';\n    // parseFloat conveniently ignores the final %\n    const int = Number.parseFloat(str);\n    if (int < 0) {\n        return 0;\n    }\n    if (int > 100) {\n        return 1;\n    }\n    return int / 100;\n}\nconst names = !isConfigured()\n    ? null\n    : makeShareable({\n        transparent: 0x00000000,\n        // http://www.w3.org/TR/css3-color/#svg-color\n        aliceblue: 0xf0f8ffff,\n        antiquewhite: 0xfaebd7ff,\n        aqua: 0x00ffffff,\n        aquamarine: 0x7fffd4ff,\n        azure: 0xf0ffffff,\n        beige: 0xf5f5dcff,\n        bisque: 0xffe4c4ff,\n        black: 0x000000ff,\n        blanchedalmond: 0xffebcdff,\n        blue: 0x0000ffff,\n        blueviolet: 0x8a2be2ff,\n        brown: 0xa52a2aff,\n        burlywood: 0xdeb887ff,\n        burntsienna: 0xea7e5dff,\n        cadetblue: 0x5f9ea0ff,\n        chartreuse: 0x7fff00ff,\n        chocolate: 0xd2691eff,\n        coral: 0xff7f50ff,\n        cornflowerblue: 0x6495edff,\n        cornsilk: 0xfff8dcff,\n        crimson: 0xdc143cff,\n        cyan: 0x00ffffff,\n        darkblue: 0x00008bff,\n        darkcyan: 0x008b8bff,\n        darkgoldenrod: 0xb8860bff,\n        darkgray: 0xa9a9a9ff,\n        darkgreen: 0x006400ff,\n        darkgrey: 0xa9a9a9ff,\n        darkkhaki: 0xbdb76bff,\n        darkmagenta: 0x8b008bff,\n        darkolivegreen: 0x556b2fff,\n        darkorange: 0xff8c00ff,\n        darkorchid: 0x9932ccff,\n        darkred: 0x8b0000ff,\n        darksalmon: 0xe9967aff,\n        darkseagreen: 0x8fbc8fff,\n        darkslateblue: 0x483d8bff,\n        darkslategray: 0x2f4f4fff,\n        darkslategrey: 0x2f4f4fff,\n        darkturquoise: 0x00ced1ff,\n        darkviolet: 0x9400d3ff,\n        deeppink: 0xff1493ff,\n        deepskyblue: 0x00bfffff,\n        dimgray: 0x696969ff,\n        dimgrey: 0x696969ff,\n        dodgerblue: 0x1e90ffff,\n        firebrick: 0xb22222ff,\n        floralwhite: 0xfffaf0ff,\n        forestgreen: 0x228b22ff,\n        fuchsia: 0xff00ffff,\n        gainsboro: 0xdcdcdcff,\n        ghostwhite: 0xf8f8ffff,\n        gold: 0xffd700ff,\n        goldenrod: 0xdaa520ff,\n        gray: 0x808080ff,\n        green: 0x008000ff,\n        greenyellow: 0xadff2fff,\n        grey: 0x808080ff,\n        honeydew: 0xf0fff0ff,\n        hotpink: 0xff69b4ff,\n        indianred: 0xcd5c5cff,\n        indigo: 0x4b0082ff,\n        ivory: 0xfffff0ff,\n        khaki: 0xf0e68cff,\n        lavender: 0xe6e6faff,\n        lavenderblush: 0xfff0f5ff,\n        lawngreen: 0x7cfc00ff,\n        lemonchiffon: 0xfffacdff,\n        lightblue: 0xadd8e6ff,\n        lightcoral: 0xf08080ff,\n        lightcyan: 0xe0ffffff,\n        lightgoldenrodyellow: 0xfafad2ff,\n        lightgray: 0xd3d3d3ff,\n        lightgreen: 0x90ee90ff,\n        lightgrey: 0xd3d3d3ff,\n        lightpink: 0xffb6c1ff,\n        lightsalmon: 0xffa07aff,\n        lightseagreen: 0x20b2aaff,\n        lightskyblue: 0x87cefaff,\n        lightslategray: 0x778899ff,\n        lightslategrey: 0x778899ff,\n        lightsteelblue: 0xb0c4deff,\n        lightyellow: 0xffffe0ff,\n        lime: 0x00ff00ff,\n        limegreen: 0x32cd32ff,\n        linen: 0xfaf0e6ff,\n        magenta: 0xff00ffff,\n        maroon: 0x800000ff,\n        mediumaquamarine: 0x66cdaaff,\n        mediumblue: 0x0000cdff,\n        mediumorchid: 0xba55d3ff,\n        mediumpurple: 0x9370dbff,\n        mediumseagreen: 0x3cb371ff,\n        mediumslateblue: 0x7b68eeff,\n        mediumspringgreen: 0x00fa9aff,\n        mediumturquoise: 0x48d1ccff,\n        mediumvioletred: 0xc71585ff,\n        midnightblue: 0x191970ff,\n        mintcream: 0xf5fffaff,\n        mistyrose: 0xffe4e1ff,\n        moccasin: 0xffe4b5ff,\n        navajowhite: 0xffdeadff,\n        navy: 0x000080ff,\n        oldlace: 0xfdf5e6ff,\n        olive: 0x808000ff,\n        olivedrab: 0x6b8e23ff,\n        orange: 0xffa500ff,\n        orangered: 0xff4500ff,\n        orchid: 0xda70d6ff,\n        palegoldenrod: 0xeee8aaff,\n        palegreen: 0x98fb98ff,\n        paleturquoise: 0xafeeeeff,\n        palevioletred: 0xdb7093ff,\n        papayawhip: 0xffefd5ff,\n        peachpuff: 0xffdab9ff,\n        peru: 0xcd853fff,\n        pink: 0xffc0cbff,\n        plum: 0xdda0ddff,\n        powderblue: 0xb0e0e6ff,\n        purple: 0x800080ff,\n        rebeccapurple: 0x663399ff,\n        red: 0xff0000ff,\n        rosybrown: 0xbc8f8fff,\n        royalblue: 0x4169e1ff,\n        saddlebrown: 0x8b4513ff,\n        salmon: 0xfa8072ff,\n        sandybrown: 0xf4a460ff,\n        seagreen: 0x2e8b57ff,\n        seashell: 0xfff5eeff,\n        sienna: 0xa0522dff,\n        silver: 0xc0c0c0ff,\n        skyblue: 0x87ceebff,\n        slateblue: 0x6a5acdff,\n        slategray: 0x708090ff,\n        slategrey: 0x708090ff,\n        snow: 0xfffafaff,\n        springgreen: 0x00ff7fff,\n        steelblue: 0x4682b4ff,\n        tan: 0xd2b48cff,\n        teal: 0x008080ff,\n        thistle: 0xd8bfd8ff,\n        tomato: 0xff6347ff,\n        turquoise: 0x40e0d0ff,\n        violet: 0xee82eeff,\n        wheat: 0xf5deb3ff,\n        white: 0xffffffff,\n        whitesmoke: 0xf5f5f5ff,\n        yellow: 0xffff00ff,\n        yellowgreen: 0x9acd32ff,\n    });\nfunction normalizeColor(color) {\n    'worklet';\n    if (typeof color === 'number') {\n        if (color >>> 0 === color && color >= 0 && color <= 0xffffffff) {\n            return color;\n        }\n        return null;\n    }\n    if (typeof color !== 'string') {\n        return null;\n    }\n    const matchers = getMatchers();\n    let match;\n    // Ordered based on occurrences on Facebook codebase\n    if ((match = matchers.hex6.exec(color))) {\n        return Number.parseInt(match[1] + 'ff', 16) >>> 0;\n    }\n    if (names[color] !== undefined) {\n        return names[color];\n    }\n    if ((match = matchers.rgb.exec(color))) {\n        return (\n        // b\n        ((parse255(match[1]) << 24) | // r\n            (parse255(match[2]) << 16) | // g\n            (parse255(match[3]) << 8) |\n            0x000000ff) >>> // a\n            0);\n    }\n    if ((match = matchers.rgba.exec(color))) {\n        return (\n        // b\n        ((parse255(match[1]) << 24) | // r\n            (parse255(match[2]) << 16) | // g\n            (parse255(match[3]) << 8) |\n            parse1(match[4])) >>> // a\n            0);\n    }\n    if ((match = matchers.hex3.exec(color))) {\n        return (Number.parseInt(match[1] +\n            match[1] + // r\n            match[2] +\n            match[2] + // g\n            match[3] +\n            match[3] + // b\n            'ff', // a\n        16) >>> 0);\n    }\n    // https://drafts.csswg.org/css-color-4/#hex-notation\n    if ((match = matchers.hex8.exec(color))) {\n        return Number.parseInt(match[1], 16) >>> 0;\n    }\n    if ((match = matchers.hex4.exec(color))) {\n        return (Number.parseInt(match[1] +\n            match[1] + // r\n            match[2] +\n            match[2] + // g\n            match[3] +\n            match[3] + // b\n            match[4] +\n            match[4], // a\n        16) >>> 0);\n    }\n    if ((match = matchers.hsl.exec(color))) {\n        return ((hslToRgb(parse360(match[1]), // h\n        parsePercentage(match[2]), // s\n        parsePercentage(match[3]) // l\n        ) |\n            0x000000ff) >>> // a\n            0);\n    }\n    if ((match = matchers.hsla.exec(color))) {\n        return ((hslToRgb(parse360(match[1]), // h\n        parsePercentage(match[2]), // s\n        parsePercentage(match[3]) // l\n        ) |\n            parse1(match[4])) >>> // a\n            0);\n    }\n    return null;\n}\nexport const opacity = (c) => {\n    'worklet';\n    return ((c >> 24) & 255) / 255;\n};\nexport const red = (c) => {\n    'worklet';\n    return (c >> 16) & 255;\n};\nexport const green = (c) => {\n    'worklet';\n    return (c >> 8) & 255;\n};\nexport const blue = (c) => {\n    'worklet';\n    return c & 255;\n};\nexport const rgbaColor = (r, g, b, alpha = 1) => {\n    'worklet';\n    if (Platform.OS === 'web' || !_WORKLET) {\n        return `rgba(${r}, ${g}, ${b}, ${alpha})`;\n    }\n    const a = Math.round(alpha * 255);\n    const c = a * (1 << 24) +\n        Math.round(r) * (1 << 16) +\n        Math.round(g) * (1 << 8) +\n        Math.round(b);\n    if (Platform.OS === 'android') {\n        // on Android color is represented as signed 32 bit int\n        return c < (1 << 31) >>> 0 ? c : c - Math.pow(2, 32);\n    }\n    return c;\n};\nfunction RGBtoHSV(r, g, b) {\n    'worklet';\n    /* eslint-disable */\n    if (arguments.length === 1) {\n        g = r.g;\n        b = r.b;\n        r = r.r;\n    }\n    const max = Math.max(r, g, b);\n    const min = Math.min(r, g, b);\n    const d = max - min;\n    const s = max === 0 ? 0 : d / max;\n    const v = max / 255;\n    let h;\n    switch (max) {\n        default:\n        /* fallthrough */\n        case min:\n            h = 0;\n            break;\n        case r:\n            h = g - b + d * (g < b ? 6 : 0);\n            h /= 6 * d;\n            break;\n        case g:\n            h = b - r + d * 2;\n            h /= 6 * d;\n            break;\n        case b:\n            h = r - g + d * 4;\n            h /= 6 * d;\n            break;\n    }\n    return {\n        h: h,\n        s: s,\n        v: v,\n    };\n    /* eslint-enable */\n}\nfunction HSVtoRGB(h, s, v) {\n    'worklet';\n    /* eslint-disable */\n    var r, g, b, i, f, p, q, t;\n    if (arguments.length === 1) {\n        s = h.s;\n        v = h.v;\n        h = h.h;\n    }\n    i = Math.floor(h * 6);\n    f = h * 6 - i;\n    p = v * (1 - s);\n    q = v * (1 - f * s);\n    t = v * (1 - (1 - f) * s);\n    switch (i % 6) {\n        case 0:\n            (r = v), (g = t), (b = p);\n            break;\n        case 1:\n            (r = q), (g = v), (b = p);\n            break;\n        case 2:\n            (r = p), (g = v), (b = t);\n            break;\n        case 3:\n            (r = p), (g = q), (b = v);\n            break;\n        case 4:\n            (r = t), (g = p), (b = v);\n            break;\n        case 5:\n            (r = v), (g = p), (b = q);\n            break;\n    }\n    return {\n        r: Math.round(r * 255),\n        g: Math.round(g * 255),\n        b: Math.round(b * 255),\n    };\n    /* eslint-enable */\n}\nexport const hsvToColor = (h, s, v) => {\n    'worklet';\n    const { r, g, b } = HSVtoRGB(h, s, v);\n    return rgbaColor(r, g, b);\n};\nexport function processColorInitially(color) {\n    'worklet';\n    if (color === null || color === undefined || typeof color === 'number') {\n        return color;\n    }\n    let normalizedColor = normalizeColor(color);\n    if (normalizedColor === null || normalizedColor === undefined) {\n        return undefined;\n    }\n    if (typeof normalizedColor !== 'number') {\n        return null;\n    }\n    normalizedColor = ((normalizedColor << 24) | (normalizedColor >>> 8)) >>> 0; // argb\n    return normalizedColor;\n}\nexport function isColor(value) {\n    'worklet';\n    if (typeof value !== 'string') {\n        return false;\n    }\n    return processColorInitially(value) != null;\n}\nexport function processColor(color) {\n    'worklet';\n    let normalizedColor = processColorInitially(color);\n    if (normalizedColor === null || normalizedColor === undefined) {\n        return undefined;\n    }\n    if (typeof normalizedColor !== 'number') {\n        return null;\n    }\n    if (Platform.OS === 'android') {\n        // Android use 32 bit *signed* integer to represent the color\n        // We utilize the fact that bitwise operations in JS also operates on\n        // signed 32 bit integers, so that we can use those to convert from\n        // *unsigned* to *signed* 32bit int that way.\n        normalizedColor = normalizedColor | 0x0;\n    }\n    return normalizedColor;\n}\nexport function convertToHSVA(color) {\n    'worklet';\n    const processedColor = processColorInitially(color); // argb;\n    const a = (processedColor >>> 24) / 255;\n    const r = (processedColor << 8) >>> 24;\n    const g = (processedColor << 16) >>> 24;\n    const b = (processedColor << 24) >>> 24;\n    const { h, s, v } = RGBtoHSV(r, g, b);\n    return [h, s, v, a];\n}\nexport function toRGBA(HSVA) {\n    'worklet';\n    const { r, g, b } = HSVtoRGB(HSVA[0], HSVA[1], HSVA[2]);\n    return `rgba(${r}, ${g}, ${b}, ${HSVA[3]})`;\n}\nconst interpolateColorsHSV = (value, inputRange, colors) => {\n    'worklet';\n    const colorsAsHSV = colors.map((c) => RGBtoHSV(c));\n    const h = interpolate(value, inputRange, colorsAsHSV.map((c) => c.h), Extrapolate.CLAMP);\n    const s = interpolate(value, inputRange, colorsAsHSV.map((c) => c.s), Extrapolate.CLAMP);\n    const v = interpolate(value, inputRange, colorsAsHSV.map((c) => c.v), Extrapolate.CLAMP);\n    return hsvToColor(h, s, v);\n};\nconst interpolateColorsRGB = (value, inputRange, colors) => {\n    'worklet';\n    const r = Math.round(interpolate(value, inputRange, colors.map((c) => red(c)), Extrapolate.CLAMP));\n    const g = Math.round(interpolate(value, inputRange, colors.map((c) => green(c)), Extrapolate.CLAMP));\n    const b = Math.round(interpolate(value, inputRange, colors.map((c) => blue(c)), Extrapolate.CLAMP));\n    const a = interpolate(value, inputRange, colors.map((c) => opacity(c)), Extrapolate.CLAMP);\n    return rgbaColor(r, g, b, a);\n};\nexport const interpolateColor = (value, inputRange, outputRange, colorSpace = 'RGB') => {\n    'worklet';\n    const processedOutputRange = outputRange.map((c) => processColor(c));\n    if (colorSpace === 'HSV') {\n        return interpolateColorsHSV(value, inputRange, processedOutputRange);\n    }\n    if (colorSpace === 'RGB') {\n        return interpolateColorsRGB(value, inputRange, processedOutputRange);\n    }\n    throw new Error(`invalid color space provided: ${colorSpace}. Supported values are: ['RGB', 'HSV']`);\n};\n"]},"metadata":{},"sourceType":"module"}