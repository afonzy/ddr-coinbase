{"ast":null,"code":"/* global _updateProps */\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-nocheck\nimport { processColor } from './Colors';\nimport { makeShareable, isConfigured } from './core';\nimport { Platform } from 'react-native';\nimport { _updatePropsJS } from './js-reanimated'; // copied from react-native/Libraries/Components/View/ReactNativeStyleAttributes\n\nconst colorProps = ['backgroundColor', 'borderBottomColor', 'borderColor', 'borderLeftColor', 'borderRightColor', 'borderTopColor', 'borderStartColor', 'borderEndColor', 'color', 'shadowColor', 'textDecorationColor', 'tintColor', 'textShadowColor', 'overlayColor'];\nconst ColorProperties = !isConfigured() ? [] : makeShareable(colorProps);\nexport const updateProps = (viewDescriptor, updates, maybeViewRef, adapters) => {\n  'worklet';\n\n  const viewName = viewDescriptor.value.name || 'RCTView';\n\n  if (adapters) {\n    adapters.forEach(adapter => {\n      adapter(updates);\n    });\n  }\n\n  if (Platform.OS !== 'web') {\n    Object.keys(updates).forEach(key => {\n      if (ColorProperties.indexOf(key) !== -1) {\n        updates[key] = processColor(updates[key]);\n      }\n    });\n  }\n\n  const updatePropsInternal = typeof _updateProps === 'undefined' ? _updatePropsJS : _updateProps;\n  updatePropsInternal(viewDescriptor.value.tag, viewName, updates, maybeViewRef);\n};\nexport const updatePropsJestWrapper = (viewDescriptor, updates, maybeViewRef, adapters, animatedStyle) => {\n  animatedStyle.current.value = Object.assign(Object.assign({}, animatedStyle.current.value), updates);\n  updateProps(viewDescriptor, updates, maybeViewRef, adapters);\n};\nexport default updateProps;","map":{"version":3,"sources":["/Users/hello/node_modules/react-native-reanimated/lib/reanimated2/UpdateProps.js"],"names":["processColor","makeShareable","isConfigured","Platform","_updatePropsJS","colorProps","ColorProperties","updateProps","viewDescriptor","updates","maybeViewRef","adapters","viewName","value","name","forEach","adapter","OS","Object","keys","key","indexOf","updatePropsInternal","_updateProps","tag","updatePropsJestWrapper","animatedStyle","current","assign"],"mappings":"AAAA;AACA;AACA;AACA,SAASA,YAAT,QAA6B,UAA7B;AACA,SAASC,aAAT,EAAwBC,YAAxB,QAA4C,QAA5C;AACA,SAASC,QAAT,QAAyB,cAAzB;AACA,SAASC,cAAT,QAA+B,iBAA/B,C,CACA;;AACA,MAAMC,UAAU,GAAG,CACf,iBADe,EAEf,mBAFe,EAGf,aAHe,EAIf,iBAJe,EAKf,kBALe,EAMf,gBANe,EAOf,kBAPe,EAQf,gBARe,EASf,OATe,EAUf,aAVe,EAWf,qBAXe,EAYf,WAZe,EAaf,iBAbe,EAcf,cAde,CAAnB;AAgBA,MAAMC,eAAe,GAAG,CAACJ,YAAY,EAAb,GAAkB,EAAlB,GAAuBD,aAAa,CAACI,UAAD,CAA5D;AACA,OAAO,MAAME,WAAW,GAAG,CAACC,cAAD,EAAiBC,OAAjB,EAA0BC,YAA1B,EAAwCC,QAAxC,KAAqD;AAC5E;;AACA,QAAMC,QAAQ,GAAGJ,cAAc,CAACK,KAAf,CAAqBC,IAArB,IAA6B,SAA9C;;AACA,MAAIH,QAAJ,EAAc;AACVA,IAAAA,QAAQ,CAACI,OAAT,CAAkBC,OAAD,IAAa;AAC1BA,MAAAA,OAAO,CAACP,OAAD,CAAP;AACH,KAFD;AAGH;;AACD,MAAIN,QAAQ,CAACc,EAAT,KAAgB,KAApB,EAA2B;AACvBC,IAAAA,MAAM,CAACC,IAAP,CAAYV,OAAZ,EAAqBM,OAArB,CAA8BK,GAAD,IAAS;AAClC,UAAId,eAAe,CAACe,OAAhB,CAAwBD,GAAxB,MAAiC,CAAC,CAAtC,EAAyC;AACrCX,QAAAA,OAAO,CAACW,GAAD,CAAP,GAAepB,YAAY,CAACS,OAAO,CAACW,GAAD,CAAR,CAA3B;AACH;AACJ,KAJD;AAKH;;AACD,QAAME,mBAAmB,GAAG,OAAOC,YAAP,KAAwB,WAAxB,GAAsCnB,cAAtC,GAAuDmB,YAAnF;AACAD,EAAAA,mBAAmB,CAACd,cAAc,CAACK,KAAf,CAAqBW,GAAtB,EAA2BZ,QAA3B,EAAqCH,OAArC,EAA8CC,YAA9C,CAAnB;AACH,CAjBM;AAkBP,OAAO,MAAMe,sBAAsB,GAAG,CAACjB,cAAD,EAAiBC,OAAjB,EAA0BC,YAA1B,EAAwCC,QAAxC,EAAkDe,aAAlD,KAAoE;AACtGA,EAAAA,aAAa,CAACC,OAAd,CAAsBd,KAAtB,GAA8BK,MAAM,CAACU,MAAP,CAAcV,MAAM,CAACU,MAAP,CAAc,EAAd,EAAkBF,aAAa,CAACC,OAAd,CAAsBd,KAAxC,CAAd,EAA8DJ,OAA9D,CAA9B;AACAF,EAAAA,WAAW,CAACC,cAAD,EAAiBC,OAAjB,EAA0BC,YAA1B,EAAwCC,QAAxC,CAAX;AACH,CAHM;AAIP,eAAeJ,WAAf","sourcesContent":["/* global _updateProps */\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-nocheck\nimport { processColor } from './Colors';\nimport { makeShareable, isConfigured } from './core';\nimport { Platform } from 'react-native';\nimport { _updatePropsJS } from './js-reanimated';\n// copied from react-native/Libraries/Components/View/ReactNativeStyleAttributes\nconst colorProps = [\n    'backgroundColor',\n    'borderBottomColor',\n    'borderColor',\n    'borderLeftColor',\n    'borderRightColor',\n    'borderTopColor',\n    'borderStartColor',\n    'borderEndColor',\n    'color',\n    'shadowColor',\n    'textDecorationColor',\n    'tintColor',\n    'textShadowColor',\n    'overlayColor',\n];\nconst ColorProperties = !isConfigured() ? [] : makeShareable(colorProps);\nexport const updateProps = (viewDescriptor, updates, maybeViewRef, adapters) => {\n    'worklet';\n    const viewName = viewDescriptor.value.name || 'RCTView';\n    if (adapters) {\n        adapters.forEach((adapter) => {\n            adapter(updates);\n        });\n    }\n    if (Platform.OS !== 'web') {\n        Object.keys(updates).forEach((key) => {\n            if (ColorProperties.indexOf(key) !== -1) {\n                updates[key] = processColor(updates[key]);\n            }\n        });\n    }\n    const updatePropsInternal = typeof _updateProps === 'undefined' ? _updatePropsJS : _updateProps;\n    updatePropsInternal(viewDescriptor.value.tag, viewName, updates, maybeViewRef);\n};\nexport const updatePropsJestWrapper = (viewDescriptor, updates, maybeViewRef, adapters, animatedStyle) => {\n    animatedStyle.current.value = Object.assign(Object.assign({}, animatedStyle.current.value), updates);\n    updateProps(viewDescriptor, updates, maybeViewRef, adapters);\n};\nexport default updateProps;\n"]},"metadata":{},"sourceType":"module"}