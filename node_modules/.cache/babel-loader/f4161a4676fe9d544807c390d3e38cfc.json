{"ast":null,"code":"/* global _WORKLET _getCurrentTime _frameTimestamp _eventTimestamp, _setGlobalConsole */\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-nocheck\nimport NativeReanimated from './NativeReanimated';\nimport { Platform } from 'react-native';\nimport { addWhitelistedNativeProps } from '../ConfigHelper';\n\nglobal.__reanimatedWorkletInit = function (worklet) {\n  worklet.__worklet = true;\n};\n\nif (global._setGlobalConsole === undefined) {\n  // it can happen when Reanimated plugin wasn't added, but the user uses the only API from version 1\n  global._setGlobalConsole = () => {// noop\n  };\n}\n\nconst testWorklet = () => {\n  'worklet';\n};\n\nexport const checkPluginState = (throwError = true) => {\n  if (!testWorklet.__workletHash && !process.env.JEST_WORKER_ID) {\n    if (throwError) {\n      throw new Error(\"Reanimated 2 failed to create a worklet, maybe you forgot to add Reanimated's babel plugin?\");\n    }\n\n    return false;\n  }\n\n  return true;\n};\nexport const isConfigured = (throwError = false) => {\n  return checkPluginState(throwError) && !NativeReanimated.useOnlyV1;\n};\nexport const isConfiguredCheck = () => {\n  if (!isConfigured(true)) {\n    throw new Error('If you want to use Reanimated 2 then go through our installation steps https://docs.swmansion.com/react-native-reanimated/docs/installation');\n  }\n};\n\nfunction _toArrayReanimated(object) {\n  'worklet';\n\n  if (Array.isArray(object)) {\n    return object;\n  }\n\n  if (typeof Symbol !== 'undefined' && (typeof Symbol === 'function' ? Symbol.iterator : '@@iterator') in Object(object)) return Array.from(object);\n  throw new 'Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.'();\n}\n\nfunction _mergeObjectsReanimated() {\n  'worklet'; // we can't use rest parameters in worklets at the moment\n  // eslint-disable-next-line prefer-rest-params\n\n  return Object.assign.apply(null, arguments);\n}\n\nglobal.__reanimatedWorkletInit = function (worklet) {\n  worklet.__worklet = true;\n\n  if (worklet._closure) {\n    const closure = worklet._closure;\n    Object.keys(closure).forEach(key => {\n      if (key === '_toConsumableArray') {\n        closure[key] = _toArrayReanimated;\n      }\n\n      if (key === '_objectSpread') {\n        closure[key] = _mergeObjectsReanimated;\n      }\n    });\n  }\n};\n\nfunction pushFrame(frame) {\n  NativeReanimated.pushFrame(frame);\n}\n\nexport function requestFrame(frame) {\n  'worklet';\n\n  if (NativeReanimated.native) {\n    requestAnimationFrame(frame);\n  } else {\n    pushFrame(frame);\n  }\n}\nglobal._WORKLET = false;\n\nglobal._log = function (s) {\n  console.log(s);\n};\n\nexport function runOnUI(worklet) {\n  return makeShareable(worklet);\n}\nexport function makeShareable(value) {\n  isConfiguredCheck();\n  return NativeReanimated.makeShareable(value);\n}\nexport function getViewProp(viewTag, propName) {\n  return new Promise((resolve, reject) => {\n    return NativeReanimated.getViewProp(viewTag, propName, result => {\n      if (result.substr(0, 6) === 'error:') {\n        reject(result);\n      } else {\n        resolve(result);\n      }\n    });\n  });\n}\n\nlet _getTimestamp;\n\nif (process.env.JEST_WORKER_ID) {\n  _getTimestamp = () => {\n    return Date.now();\n  };\n} else {\n  _getTimestamp = () => {\n    'worklet';\n\n    if (_frameTimestamp) {\n      return _frameTimestamp;\n    }\n\n    if (_eventTimestamp) {\n      return _eventTimestamp;\n    }\n\n    return _getCurrentTime();\n  };\n}\n\nexport function getTimestamp() {\n  'worklet';\n\n  if (Platform.OS === 'web') {\n    return NativeReanimated.getTimestamp();\n  }\n\n  return _getTimestamp();\n}\n\nfunction workletValueSetter(value) {\n  'worklet';\n\n  const previousAnimation = this._animation;\n\n  if (previousAnimation) {\n    previousAnimation.cancelled = true;\n    this._animation = null;\n  }\n\n  if (typeof value === 'function' || value !== null && typeof value === 'object' && value.onFrame) {\n    const animation = typeof value === 'function' ? value() : value; // prevent setting again to the same value\n    // and triggering the mappers that treat this value as an input\n    // this happens when the animation's target value(stored in animation.current until animation.onStart is called) is set to the same value as a current one(this._value)\n    // built in animations that are not higher order(withTiming, withSpring) hold target value in .current\n\n    if (this._value === animation.current && !animation.isHigherOrder) {\n      return;\n    } // animated set\n\n\n    const initializeAnimation = timestamp => {\n      animation.onStart(animation, this.value, timestamp, previousAnimation);\n    };\n\n    initializeAnimation(getTimestamp());\n\n    const step = timestamp => {\n      if (animation.cancelled) {\n        animation.callback && animation.callback(false\n        /* finished */\n        );\n        return;\n      }\n\n      const finished = animation.onFrame(animation, timestamp);\n      animation.timestamp = timestamp;\n      this._value = animation.current;\n\n      if (finished) {\n        animation.callback && animation.callback(true\n        /* finished */\n        );\n      } else {\n        requestAnimationFrame(step);\n      }\n    };\n\n    this._animation = animation;\n\n    if (_frameTimestamp) {\n      // frame\n      step(_frameTimestamp);\n    } else {\n      requestAnimationFrame(step);\n    }\n  } else {\n    // prevent setting again to the same value\n    // and triggering the mappers that treat this value as an input\n    if (this._value === value) {\n      return;\n    }\n\n    this._value = value;\n  }\n} // We cannot use pushFrame\n// so we use own implementation for js\n\n\nfunction workletValueSetterJS(value) {\n  const previousAnimation = this._animation;\n\n  if (previousAnimation) {\n    previousAnimation.cancelled = true;\n    this._animation = null;\n  }\n\n  if (typeof value === 'function' || value !== null && typeof value === 'object' && value.onFrame) {\n    // animated set\n    const animation = typeof value === 'function' ? value() : value;\n\n    let initializeAnimation = timestamp => {\n      animation.onStart(animation, this.value, timestamp, previousAnimation);\n    };\n\n    const step = timestamp => {\n      if (animation.cancelled) {\n        animation.callback && animation.callback(false\n        /* finished */\n        );\n        return;\n      }\n\n      if (initializeAnimation) {\n        initializeAnimation(timestamp);\n        initializeAnimation = null; // prevent closure from keeping ref to previous animation\n      }\n\n      const finished = animation.onFrame(animation, timestamp);\n      animation.timestamp = timestamp;\n\n      this._setValue(animation.current);\n\n      if (finished) {\n        animation.callback && animation.callback(true\n        /* finished */\n        );\n      } else {\n        requestFrame(step);\n      }\n    };\n\n    this._animation = animation;\n    requestFrame(step);\n  } else {\n    this._setValue(value);\n  }\n}\n\nexport function makeMutable(value) {\n  isConfiguredCheck();\n  return NativeReanimated.makeMutable(value);\n}\nexport function makeRemote(object = {}) {\n  isConfiguredCheck();\n  return NativeReanimated.makeRemote(object);\n}\nexport function startMapper(mapper, inputs = [], outputs = []) {\n  isConfiguredCheck();\n  return NativeReanimated.startMapper(mapper, inputs, outputs);\n}\nexport function stopMapper(mapperId) {\n  NativeReanimated.stopMapper(mapperId);\n}\nexport const runOnJS = fun => {\n  'worklet';\n\n  if (!_WORKLET) {\n    return fun;\n  }\n\n  if (!fun.__callAsync) {\n    throw new Error(\"Attempting to call runOnJS with an object that is not a host function. Using runOnJS is only possible with methods that are defined on the main React-Native Javascript thread and that aren't marked as worklets\");\n  } else {\n    return fun.__callAsync;\n  }\n};\nexport function createAnimatedPropAdapter(adapter, nativeProps) {\n  const nativePropsToAdd = {}; // eslint-disable-next-line no-unused-expressions\n\n  nativeProps === null || nativeProps === void 0 ? void 0 : nativeProps.forEach(prop => {\n    nativePropsToAdd[prop] = true;\n  });\n  addWhitelistedNativeProps(nativePropsToAdd);\n  return adapter;\n}\n\nif (!NativeReanimated.useOnlyV1) {\n  NativeReanimated.installCoreFunctions(NativeReanimated.native ? workletValueSetter : workletValueSetterJS);\n  const capturableConsole = console;\n  isConfigured() && runOnUI(() => {\n    'worklet';\n\n    const console = {\n      debug: runOnJS(capturableConsole.debug),\n      log: runOnJS(capturableConsole.log),\n      warn: runOnJS(capturableConsole.warn),\n      error: runOnJS(capturableConsole.error),\n      info: runOnJS(capturableConsole.info)\n    };\n\n    _setGlobalConsole(console);\n  })();\n}","map":{"version":3,"sources":["/Users/hello/node_modules/react-native-reanimated/lib/reanimated2/core.js"],"names":["NativeReanimated","Platform","addWhitelistedNativeProps","global","__reanimatedWorkletInit","worklet","__worklet","_setGlobalConsole","undefined","testWorklet","checkPluginState","throwError","__workletHash","process","env","JEST_WORKER_ID","Error","isConfigured","useOnlyV1","isConfiguredCheck","_toArrayReanimated","object","Array","isArray","Symbol","iterator","Object","from","_mergeObjectsReanimated","assign","apply","arguments","_closure","closure","keys","forEach","key","pushFrame","frame","requestFrame","native","requestAnimationFrame","_WORKLET","_log","s","console","log","runOnUI","makeShareable","value","getViewProp","viewTag","propName","Promise","resolve","reject","result","substr","_getTimestamp","Date","now","_frameTimestamp","_eventTimestamp","_getCurrentTime","getTimestamp","OS","workletValueSetter","previousAnimation","_animation","cancelled","onFrame","animation","_value","current","isHigherOrder","initializeAnimation","timestamp","onStart","step","callback","finished","workletValueSetterJS","_setValue","makeMutable","makeRemote","startMapper","mapper","inputs","outputs","stopMapper","mapperId","runOnJS","fun","__callAsync","createAnimatedPropAdapter","adapter","nativeProps","nativePropsToAdd","prop","installCoreFunctions","capturableConsole","debug","warn","error","info"],"mappings":"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","sourcesContent":["/* global _WORKLET _getCurrentTime _frameTimestamp _eventTimestamp, _setGlobalConsole */\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-nocheck\nimport NativeReanimated from './NativeReanimated';\nimport { Platform } from 'react-native';\nimport { addWhitelistedNativeProps } from '../ConfigHelper';\nglobal.__reanimatedWorkletInit = function (worklet) {\n    worklet.__worklet = true;\n};\nif (global._setGlobalConsole === undefined) {\n    // it can happen when Reanimated plugin wasn't added, but the user uses the only API from version 1\n    global._setGlobalConsole = () => {\n        // noop\n    };\n}\nconst testWorklet = () => {\n    'worklet';\n};\nexport const checkPluginState = (throwError = true) => {\n    if (!testWorklet.__workletHash && !process.env.JEST_WORKER_ID) {\n        if (throwError) {\n            throw new Error(\"Reanimated 2 failed to create a worklet, maybe you forgot to add Reanimated's babel plugin?\");\n        }\n        return false;\n    }\n    return true;\n};\nexport const isConfigured = (throwError = false) => {\n    return checkPluginState(throwError) && !NativeReanimated.useOnlyV1;\n};\nexport const isConfiguredCheck = () => {\n    if (!isConfigured(true)) {\n        throw new Error('If you want to use Reanimated 2 then go through our installation steps https://docs.swmansion.com/react-native-reanimated/docs/installation');\n    }\n};\nfunction _toArrayReanimated(object) {\n    'worklet';\n    if (Array.isArray(object)) {\n        return object;\n    }\n    if (typeof Symbol !== 'undefined' &&\n        (typeof Symbol === 'function' ? Symbol.iterator : '@@iterator') in\n            Object(object))\n        return Array.from(object);\n    throw new 'Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.'();\n}\nfunction _mergeObjectsReanimated() {\n    'worklet';\n    // we can't use rest parameters in worklets at the moment\n    // eslint-disable-next-line prefer-rest-params\n    return Object.assign.apply(null, arguments);\n}\nglobal.__reanimatedWorkletInit = function (worklet) {\n    worklet.__worklet = true;\n    if (worklet._closure) {\n        const closure = worklet._closure;\n        Object.keys(closure).forEach((key) => {\n            if (key === '_toConsumableArray') {\n                closure[key] = _toArrayReanimated;\n            }\n            if (key === '_objectSpread') {\n                closure[key] = _mergeObjectsReanimated;\n            }\n        });\n    }\n};\nfunction pushFrame(frame) {\n    NativeReanimated.pushFrame(frame);\n}\nexport function requestFrame(frame) {\n    'worklet';\n    if (NativeReanimated.native) {\n        requestAnimationFrame(frame);\n    }\n    else {\n        pushFrame(frame);\n    }\n}\nglobal._WORKLET = false;\nglobal._log = function (s) {\n    console.log(s);\n};\nexport function runOnUI(worklet) {\n    return makeShareable(worklet);\n}\nexport function makeShareable(value) {\n    isConfiguredCheck();\n    return NativeReanimated.makeShareable(value);\n}\nexport function getViewProp(viewTag, propName) {\n    return new Promise((resolve, reject) => {\n        return NativeReanimated.getViewProp(viewTag, propName, (result) => {\n            if (result.substr(0, 6) === 'error:') {\n                reject(result);\n            }\n            else {\n                resolve(result);\n            }\n        });\n    });\n}\nlet _getTimestamp;\nif (process.env.JEST_WORKER_ID) {\n    _getTimestamp = () => {\n        return Date.now();\n    };\n}\nelse {\n    _getTimestamp = () => {\n        'worklet';\n        if (_frameTimestamp) {\n            return _frameTimestamp;\n        }\n        if (_eventTimestamp) {\n            return _eventTimestamp;\n        }\n        return _getCurrentTime();\n    };\n}\nexport function getTimestamp() {\n    'worklet';\n    if (Platform.OS === 'web') {\n        return NativeReanimated.getTimestamp();\n    }\n    return _getTimestamp();\n}\nfunction workletValueSetter(value) {\n    'worklet';\n    const previousAnimation = this._animation;\n    if (previousAnimation) {\n        previousAnimation.cancelled = true;\n        this._animation = null;\n    }\n    if (typeof value === 'function' ||\n        (value !== null && typeof value === 'object' && value.onFrame)) {\n        const animation = typeof value === 'function' ? value() : value;\n        // prevent setting again to the same value\n        // and triggering the mappers that treat this value as an input\n        // this happens when the animation's target value(stored in animation.current until animation.onStart is called) is set to the same value as a current one(this._value)\n        // built in animations that are not higher order(withTiming, withSpring) hold target value in .current\n        if (this._value === animation.current && !animation.isHigherOrder) {\n            return;\n        }\n        // animated set\n        const initializeAnimation = (timestamp) => {\n            animation.onStart(animation, this.value, timestamp, previousAnimation);\n        };\n        initializeAnimation(getTimestamp());\n        const step = (timestamp) => {\n            if (animation.cancelled) {\n                animation.callback && animation.callback(false /* finished */);\n                return;\n            }\n            const finished = animation.onFrame(animation, timestamp);\n            animation.timestamp = timestamp;\n            this._value = animation.current;\n            if (finished) {\n                animation.callback && animation.callback(true /* finished */);\n            }\n            else {\n                requestAnimationFrame(step);\n            }\n        };\n        this._animation = animation;\n        if (_frameTimestamp) {\n            // frame\n            step(_frameTimestamp);\n        }\n        else {\n            requestAnimationFrame(step);\n        }\n    }\n    else {\n        // prevent setting again to the same value\n        // and triggering the mappers that treat this value as an input\n        if (this._value === value) {\n            return;\n        }\n        this._value = value;\n    }\n}\n// We cannot use pushFrame\n// so we use own implementation for js\nfunction workletValueSetterJS(value) {\n    const previousAnimation = this._animation;\n    if (previousAnimation) {\n        previousAnimation.cancelled = true;\n        this._animation = null;\n    }\n    if (typeof value === 'function' ||\n        (value !== null && typeof value === 'object' && value.onFrame)) {\n        // animated set\n        const animation = typeof value === 'function' ? value() : value;\n        let initializeAnimation = (timestamp) => {\n            animation.onStart(animation, this.value, timestamp, previousAnimation);\n        };\n        const step = (timestamp) => {\n            if (animation.cancelled) {\n                animation.callback && animation.callback(false /* finished */);\n                return;\n            }\n            if (initializeAnimation) {\n                initializeAnimation(timestamp);\n                initializeAnimation = null; // prevent closure from keeping ref to previous animation\n            }\n            const finished = animation.onFrame(animation, timestamp);\n            animation.timestamp = timestamp;\n            this._setValue(animation.current);\n            if (finished) {\n                animation.callback && animation.callback(true /* finished */);\n            }\n            else {\n                requestFrame(step);\n            }\n        };\n        this._animation = animation;\n        requestFrame(step);\n    }\n    else {\n        this._setValue(value);\n    }\n}\nexport function makeMutable(value) {\n    isConfiguredCheck();\n    return NativeReanimated.makeMutable(value);\n}\nexport function makeRemote(object = {}) {\n    isConfiguredCheck();\n    return NativeReanimated.makeRemote(object);\n}\nexport function startMapper(mapper, inputs = [], outputs = []) {\n    isConfiguredCheck();\n    return NativeReanimated.startMapper(mapper, inputs, outputs);\n}\nexport function stopMapper(mapperId) {\n    NativeReanimated.stopMapper(mapperId);\n}\nexport const runOnJS = (fun) => {\n    'worklet';\n    if (!_WORKLET) {\n        return fun;\n    }\n    if (!fun.__callAsync) {\n        throw new Error(\"Attempting to call runOnJS with an object that is not a host function. Using runOnJS is only possible with methods that are defined on the main React-Native Javascript thread and that aren't marked as worklets\");\n    }\n    else {\n        return fun.__callAsync;\n    }\n};\nexport function createAnimatedPropAdapter(adapter, nativeProps) {\n    const nativePropsToAdd = {};\n    // eslint-disable-next-line no-unused-expressions\n    nativeProps === null || nativeProps === void 0 ? void 0 : nativeProps.forEach((prop) => {\n        nativePropsToAdd[prop] = true;\n    });\n    addWhitelistedNativeProps(nativePropsToAdd);\n    return adapter;\n}\nif (!NativeReanimated.useOnlyV1) {\n    NativeReanimated.installCoreFunctions(NativeReanimated.native ? workletValueSetter : workletValueSetterJS);\n    const capturableConsole = console;\n    isConfigured() &&\n        runOnUI(() => {\n            'worklet';\n            const console = {\n                debug: runOnJS(capturableConsole.debug),\n                log: runOnJS(capturableConsole.log),\n                warn: runOnJS(capturableConsole.warn),\n                error: runOnJS(capturableConsole.error),\n                info: runOnJS(capturableConsole.info),\n            };\n            _setGlobalConsole(console);\n        })();\n}\n"]},"metadata":{},"sourceType":"module"}