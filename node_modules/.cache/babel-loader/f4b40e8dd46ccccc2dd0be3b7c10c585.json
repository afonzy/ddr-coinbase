{"ast":null,"code":"// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-nocheck\nimport NativeModule from './NativeReanimated';\n\nconst jsListener = (eventName, handler) => evt => {\n  handler(Object.assign(Object.assign({}, evt.nativeEvent), {\n    eventName\n  }));\n};\n\nexport default class WorkletEventHandler {\n  constructor(worklet, eventNames = []) {\n    this.worklet = worklet;\n    this.eventNames = eventNames;\n    this.reattachNeeded = false;\n\n    if (!NativeModule.native) {\n      this.listeners = eventNames.reduce((acc, eventName) => {\n        acc[eventName] = jsListener(eventName, worklet);\n        return acc;\n      }, {});\n    }\n  }\n\n  updateWorklet(newWorklet) {\n    this.worklet = newWorklet;\n    this.reattachNeeded = true;\n  }\n\n  registerForEvents(viewTag, fallbackEventName = undefined) {\n    this.viewTag = viewTag;\n    this.registrations = this.eventNames.map(eventName => NativeModule.registerEventHandler(viewTag + eventName, this.worklet));\n\n    if (this.registrations.length === 0 && fallbackEventName) {\n      this.registrations.push(NativeModule.registerEventHandler(viewTag + fallbackEventName, this.worklet));\n    }\n  }\n\n  unregisterFromEvents() {\n    this.registrations && this.registrations.forEach(id => NativeModule.unregisterEventHandler(id));\n    this.registrations = undefined;\n  }\n\n}","map":{"version":3,"sources":["/Users/hello/node_modules/react-native-reanimated/lib/reanimated2/WorkletEventHandler.js"],"names":["NativeModule","jsListener","eventName","handler","evt","Object","assign","nativeEvent","WorkletEventHandler","constructor","worklet","eventNames","reattachNeeded","native","listeners","reduce","acc","updateWorklet","newWorklet","registerForEvents","viewTag","fallbackEventName","undefined","registrations","map","registerEventHandler","length","push","unregisterFromEvents","forEach","id","unregisterEventHandler"],"mappings":"AAAA;AACA;AACA,OAAOA,YAAP,MAAyB,oBAAzB;;AACA,MAAMC,UAAU,GAAG,CAACC,SAAD,EAAYC,OAAZ,KAAyBC,GAAD,IAAS;AAChDD,EAAAA,OAAO,CAACE,MAAM,CAACC,MAAP,CAAcD,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBF,GAAG,CAACG,WAAtB,CAAd,EAAkD;AAAEL,IAAAA;AAAF,GAAlD,CAAD,CAAP;AACH,CAFD;;AAGA,eAAe,MAAMM,mBAAN,CAA0B;AACrCC,EAAAA,WAAW,CAACC,OAAD,EAAUC,UAAU,GAAG,EAAvB,EAA2B;AAClC,SAAKD,OAAL,GAAeA,OAAf;AACA,SAAKC,UAAL,GAAkBA,UAAlB;AACA,SAAKC,cAAL,GAAsB,KAAtB;;AACA,QAAI,CAACZ,YAAY,CAACa,MAAlB,EAA0B;AACtB,WAAKC,SAAL,GAAiBH,UAAU,CAACI,MAAX,CAAkB,CAACC,GAAD,EAAMd,SAAN,KAAoB;AACnDc,QAAAA,GAAG,CAACd,SAAD,CAAH,GAAiBD,UAAU,CAACC,SAAD,EAAYQ,OAAZ,CAA3B;AACA,eAAOM,GAAP;AACH,OAHgB,EAGd,EAHc,CAAjB;AAIH;AACJ;;AACDC,EAAAA,aAAa,CAACC,UAAD,EAAa;AACtB,SAAKR,OAAL,GAAeQ,UAAf;AACA,SAAKN,cAAL,GAAsB,IAAtB;AACH;;AACDO,EAAAA,iBAAiB,CAACC,OAAD,EAAUC,iBAAiB,GAAGC,SAA9B,EAAyC;AACtD,SAAKF,OAAL,GAAeA,OAAf;AACA,SAAKG,aAAL,GAAqB,KAAKZ,UAAL,CAAgBa,GAAhB,CAAqBtB,SAAD,IAAeF,YAAY,CAACyB,oBAAb,CAAkCL,OAAO,GAAGlB,SAA5C,EAAuD,KAAKQ,OAA5D,CAAnC,CAArB;;AACA,QAAI,KAAKa,aAAL,CAAmBG,MAAnB,KAA8B,CAA9B,IAAmCL,iBAAvC,EAA0D;AACtD,WAAKE,aAAL,CAAmBI,IAAnB,CAAwB3B,YAAY,CAACyB,oBAAb,CAAkCL,OAAO,GAAGC,iBAA5C,EAA+D,KAAKX,OAApE,CAAxB;AACH;AACJ;;AACDkB,EAAAA,oBAAoB,GAAG;AACnB,SAAKL,aAAL,IACI,KAAKA,aAAL,CAAmBM,OAAnB,CAA4BC,EAAD,IAAQ9B,YAAY,CAAC+B,sBAAb,CAAoCD,EAApC,CAAnC,CADJ;AAEA,SAAKP,aAAL,GAAqBD,SAArB;AACH;;AA3BoC","sourcesContent":["// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-nocheck\nimport NativeModule from './NativeReanimated';\nconst jsListener = (eventName, handler) => (evt) => {\n    handler(Object.assign(Object.assign({}, evt.nativeEvent), { eventName }));\n};\nexport default class WorkletEventHandler {\n    constructor(worklet, eventNames = []) {\n        this.worklet = worklet;\n        this.eventNames = eventNames;\n        this.reattachNeeded = false;\n        if (!NativeModule.native) {\n            this.listeners = eventNames.reduce((acc, eventName) => {\n                acc[eventName] = jsListener(eventName, worklet);\n                return acc;\n            }, {});\n        }\n    }\n    updateWorklet(newWorklet) {\n        this.worklet = newWorklet;\n        this.reattachNeeded = true;\n    }\n    registerForEvents(viewTag, fallbackEventName = undefined) {\n        this.viewTag = viewTag;\n        this.registrations = this.eventNames.map((eventName) => NativeModule.registerEventHandler(viewTag + eventName, this.worklet));\n        if (this.registrations.length === 0 && fallbackEventName) {\n            this.registrations.push(NativeModule.registerEventHandler(viewTag + fallbackEventName, this.worklet));\n        }\n    }\n    unregisterFromEvents() {\n        this.registrations &&\n            this.registrations.forEach((id) => NativeModule.unregisterEventHandler(id));\n        this.registrations = undefined;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}